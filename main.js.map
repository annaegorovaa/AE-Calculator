{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/index.js","webpack:///./node_modules/decimal.js-light/decimal.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Decimal","log","storedNumber","currentNumber","operation","firstDigit","write","document","getElementById","writeToLog","innerText","addSymbol","includes","length","charAt","substring","addOperation","slice","equalsListener","Number","calcPercent","b","minus","plus","times","dividedBy","clearValue","lastIndexOf","window","onload","addEventListener","onkeydown","event","x","which","match","preventDefault","__WEBPACK_AMD_DEFINE_RESULT__","globalScope","ONE","MAX_DIGITS","precision","rounding","toExpNeg","toExpPos","LN10","external","decimalError","invalidArgument","exponentOutOfRange","mathfloor","Math","floor","mathpow","pow","isDecimal","BASE","LOG_BASE","MAX_E","P","add","y","carry","e","k","len","xd","yd","Ctor","constructor","pr","round","ceil","reverse","push","unshift","pop","checkInt32","min","max","Error","digitsToString","ws","indexOfLastWord","str","w","getZeroString","absoluteValue","abs","this","comparedTo","cmp","j","xdL","ydL","decimalPlaces","dp","div","divide","dividedToIntegerBy","idiv","equals","eq","exponent","getBase10Exponent","greaterThan","gt","greaterThanOrEqualTo","gte","isInteger","isint","isNegative","isneg","isPositive","ispos","isZero","lessThan","lt","lessThanOrEqualTo","lte","logarithm","base","wpr","ln","sub","subtract","modulo","mod","q","naturalExponential","exp","naturalLogarithm","negated","neg","sd","z","squareRoot","sqrt","toExponential","indexOf","toString","mul","rL","shift","toDecimalPlaces","todp","rm","toFixed","toInteger","toint","toNumber","toPower","sign","yIsInt","yn","truncate","toPrecision","toSignificantDigits","tosd","valueOf","val","toJSON","multiplyInteger","temp","compare","a","aL","bL","prod","prodL","qd","rem","remL","rem0","xi","xL","yd0","yL","yz","denominator","sum","getLn10","zs","c0","numerator","x2","parseDecimal","replace","search","charCodeAt","rd","doRound","xdi","xe","xLTy","isExp","arr","config","obj","v","ps","clone","test","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","set","undefined"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"https://github.com/annaegorovaa/AE-Calculator/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","const Decimal = require('decimal.js-light');\r\n\r\nlet log = '';\r\nlet storedNumber = '';\r\nlet currentNumber = '';\r\nlet operation = '';\r\nlet firstDigit = true;\r\n\r\nwindow.onload = () => {\r\n  write(0);\r\n};\r\n\r\ndocument.getElementById('1').addEventListener('click', () => addSymbol('1'));\r\ndocument.getElementById('2').addEventListener('click', () => addSymbol('2'));\r\ndocument.getElementById('3').addEventListener('click', () => addSymbol('3'));\r\ndocument.getElementById('4').addEventListener('click', () => addSymbol('4'));\r\ndocument.getElementById('5').addEventListener('click', () => addSymbol('5'));\r\ndocument.getElementById('6').addEventListener('click', () => addSymbol('6'));\r\ndocument.getElementById('7').addEventListener('click', () => addSymbol('7'));\r\ndocument.getElementById('8').addEventListener('click', () => addSymbol('8'));\r\ndocument.getElementById('9').addEventListener('click', () => addSymbol('9'));\r\ndocument.getElementById('0').addEventListener('click', () => addSymbol('0'));\r\ndocument.getElementById('.').addEventListener('click', () => addSymbol('.'));\r\ndocument.getElementById('minus').addEventListener('click', () => addOperation('-'));\r\ndocument.getElementById('plus').addEventListener('click', () => addOperation('+'));\r\ndocument.getElementById('divide').addEventListener('click', () => addOperation('/'));\r\ndocument.getElementById('multiply').addEventListener('click', () => addOperation('*'));\r\ndocument.getElementById('change-sign').addEventListener('click', () => addSymbol('-'));\r\ndocument.getElementById('percent').addEventListener('click', () => calcPercent());\r\ndocument.getElementById('equals').addEventListener('click', () => equalsListener());\r\ndocument.getElementById('clear').addEventListener('click', () => clearValue());\r\n\r\nfunction write(value) {\r\n  document.getElementById('display').value = value;\r\n}\r\n\r\nfunction writeToLog(value) {\r\n  document.getElementById('log').innerText = value;\r\n}\r\n\r\ndocument.onkeydown = typeSymbol;\r\n\r\nfunction typeSymbol(event) {\r\n  let x = event.key || event.which;\r\n  if (x.match(/^[0-9.]$/)) {\r\n    addSymbol(x);\r\n  } else if (x.match(/[/*-+]/)) {\r\n    addOperation(x);\r\n  } else if (x === '%') {\r\n    calcPercent();\r\n  } else if (x === 'Enter') {\r\n    equalsListener();\r\n  } else if (x === 'Escape') {\r\n    clearValue();\r\n  } else {\r\n    return;\r\n  }\r\n  event.preventDefault();\r\n}\r\n\r\nfunction addSymbol(value) {\r\n  if (firstDigit) {\r\n    currentNumber = '';\r\n  }\r\n  if ((value === '0' && currentNumber === '0') || (value === '.' && currentNumber.includes('.'))) {\r\n    return;\r\n  } else if (value === '.' && !currentNumber.length) {\r\n    currentNumber = '0';\r\n  }\r\n  if (value === '-') {\r\n    currentNumber = currentNumber.charAt(0) === value ? currentNumber.substring(1) : value + currentNumber;\r\n  } else {\r\n    if (value !== '.' && currentNumber === '0') {\r\n      currentNumber = '';\r\n    }\r\n    currentNumber += value;\r\n  }\r\n  firstDigit = false;\r\n  write(currentNumber);\r\n}\r\n\r\nfunction addOperation(value){\r\n  if(!operation) {\r\n    storedNumber = Number(currentNumber);\r\n    operation = value;\r\n    firstDigit = true;\r\n    log += `${storedNumber} ${operation}`;\r\n  } else {\r\n    if (log.slice(-1) === '\\n') {\r\n      log += `${storedNumber} ${operation}`;\r\n    }\r\n    equalsListener();\r\n    operation = value;\r\n  }\r\n  currentNumber = '';\r\n  writeToLog(log);\r\n}\r\n\r\nfunction calcPercent() {\r\n  currentNumber = Number(currentNumber) * storedNumber / 100;\r\n  write(currentNumber);\r\n  equalsListener();\r\n}\r\n\r\nfunction equalsListener() {\r\n  let b = Number(currentNumber);\r\n  if (operation && log.slice(-1) === '\\n') {\r\n    log += `${storedNumber} ${operation}`;\r\n  }\r\n  if (operation) {\r\n    switch (operation) {\r\n      case '-':\r\n        currentNumber = new Decimal(storedNumber).minus(b);\r\n        break;\r\n      case '+':\r\n        currentNumber = new Decimal(storedNumber).plus(b);\r\n        break;\r\n      case '*':\r\n        currentNumber = new Decimal(storedNumber).times(b);\r\n        break;\r\n      case '/':\r\n        currentNumber = new Decimal(storedNumber).dividedBy(b);\r\n        break;\r\n    }\r\n    write(currentNumber);\r\n    log += ` ${b} = ${currentNumber}\\n`;\r\n    writeToLog(log);\r\n    storedNumber = Number(currentNumber);\r\n    operation = '';\r\n    firstDigit = true;\r\n  }\r\n}\r\n\r\nfunction clearValue() {\r\n  write('0');\r\n  if (log.charAt(log.length - 1) !== '\\n') {\r\n    log = log.substring(0, log.lastIndexOf('\\n') + 1);\r\n  }\r\n  writeToLog(log);\r\n  storedNumber = '';\r\n  currentNumber = '';\r\n  operation = '';\r\n  firstDigit = '';\r\n}","/*! decimal.js-light v2.4.1 https://github.com/MikeMcl/decimal.js-light/LICENCE */\r\n;(function (globalScope) {\r\n  'use strict';\r\n\r\n\r\n  /*\r\n   *  decimal.js-light v2.4.1\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js-light\r\n   *  Copyright (c) 2017 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Expat Licence\r\n   */\r\n\r\n\r\n  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n    // The limit on the value of `precision`, and on the value of the first argument to\r\n    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n  var MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n\r\n    // The initial configuration properties of the Decimal constructor.\r\n    Decimal = {\r\n\r\n      // These values must be integers within the stated ranges (inclusive).\r\n      // Most of these values can be changed during run-time using `Decimal.config`.\r\n\r\n      // The maximum number of significant digits of the result of a calculation or base conversion.\r\n      // E.g. `Decimal.config({ precision: 20 });`\r\n      precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n      // The rounding mode used by default by `toInteger`, `toDecimalPlaces`, `toExponential`,\r\n      // `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n      //\r\n      // ROUND_UP         0 Away from zero.\r\n      // ROUND_DOWN       1 Towards zero.\r\n      // ROUND_CEIL       2 Towards +Infinity.\r\n      // ROUND_FLOOR      3 Towards -Infinity.\r\n      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      //\r\n      // E.g.\r\n      // `Decimal.rounding = 4;`\r\n      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n      rounding: 4,                           // 0 to 8\r\n\r\n      // The exponent value at and beneath which `toString` returns exponential notation.\r\n      // JavaScript numbers: -7\r\n      toExpNeg: -7,                          // 0 to -MAX_E\r\n\r\n      // The exponent value at and above which `toString` returns exponential notation.\r\n      // JavaScript numbers: 21\r\n      toExpPos:  21,                         // 0 to MAX_E\r\n\r\n      // The natural logarithm of 10.\r\n      // 115 digits\r\n      LN10: '2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286'\r\n    },\r\n\r\n\r\n  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n    external = true,\r\n\r\n    decimalError = '[DecimalError] ',\r\n    invalidArgument = decimalError + 'Invalid argument: ',\r\n    exponentOutOfRange = decimalError + 'Exponent out of range: ',\r\n\r\n    mathfloor = Math.floor,\r\n    mathpow = Math.pow,\r\n\r\n    isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n    ONE,\r\n    BASE = 1e7,\r\n    LOG_BASE = 7,\r\n    MAX_SAFE_INTEGER = 9007199254740991,\r\n    MAX_E = mathfloor(MAX_SAFE_INTEGER / LOG_BASE),    // 1286742750677284\r\n\r\n    // Decimal.prototype object\r\n    P = {};\r\n\r\n\r\n  // Decimal prototype methods\r\n\r\n\r\n  /*\r\n   *  absoluteValue                       abs\r\n   *  comparedTo                          cmp\r\n   *  decimalPlaces                       dp\r\n   *  dividedBy                           div\r\n   *  dividedToIntegerBy                  idiv\r\n   *  equals                              eq\r\n   *  exponent\r\n   *  greaterThan                         gt\r\n   *  greaterThanOrEqualTo                gte\r\n   *  isInteger                           isint\r\n   *  isNegative                          isneg\r\n   *  isPositive                          ispos\r\n   *  isZero\r\n   *  lessThan                            lt\r\n   *  lessThanOrEqualTo                   lte\r\n   *  logarithm                           log\r\n   *  minus                               sub\r\n   *  modulo                              mod\r\n   *  naturalExponential                  exp\r\n   *  naturalLogarithm                    ln\r\n   *  negated                             neg\r\n   *  plus                                add\r\n   *  precision                           sd\r\n   *  squareRoot                          sqrt\r\n   *  times                               mul\r\n   *  toDecimalPlaces                     todp\r\n   *  toExponential\r\n   *  toFixed\r\n   *  toInteger                           toint\r\n   *  toNumber\r\n   *  toPower                             pow\r\n   *  toPrecision\r\n   *  toSignificantDigits                 tosd\r\n   *  toString\r\n   *  valueOf                             val\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of this Decimal.\r\n   *\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    if (x.s) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if the value of this Decimal is greater than the value of `y`,\r\n   *  -1    if the value of this Decimal is less than the value of `y`,\r\n   *   0    if they have the same value\r\n   *\r\n   */\r\n  P.comparedTo = P.cmp = function (y) {\r\n    var i, j, xdL, ydL,\r\n      x = this;\r\n\r\n    y = new x.constructor(y);\r\n\r\n    // Signs differ?\r\n    if (x.s !== y.s) return x.s || -y.s;\r\n\r\n    // Compare exponents.\r\n    if (x.e !== y.e) return x.e > y.e ^ x.s < 0 ? 1 : -1;\r\n\r\n    xdL = x.d.length;\r\n    ydL = y.d.length;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n      if (x.d[i] !== y.d[i]) return x.d[i] > y.d[i] ^ x.s < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return xdL === ydL ? 0 : xdL > ydL ^ x.s < 0 ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of decimal places of the value of this Decimal.\r\n   *\r\n   */\r\n  P.decimalPlaces = P.dp = function () {\r\n    var x = this,\r\n      w = x.d.length - 1,\r\n      dp = (w - x.e) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    w = x.d[w];\r\n    if (w) for (; w % 10 == 0; w /= 10) dp--;\r\n\r\n    return dp < 0 ? 0 : dp;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\r\n  P.dividedBy = P.div = function (y) {\r\n    return divide(this, new this.constructor(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n   * by the value of `y`, truncated to `precision` significant digits.\r\n   *\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n    return round(divide(x, new Ctor(y), 0, 1), Ctor.precision);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.equals = P.eq = function (y) {\r\n    return !this.cmp(y);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the (base 10) exponent value of this Decimal (this.e is the base 10000000 exponent).\r\n   *\r\n   */\r\n  P.exponent = function () {\r\n    return getBase10Exponent(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n   * false.\r\n   *\r\n   */\r\n  P.greaterThan = P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  P.greaterThanOrEqualTo = P.gte = function (y) {\r\n    return this.cmp(y) >= 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is an integer, otherwise return false.\r\n   *\r\n   */\r\n  P.isInteger = P.isint = function () {\r\n    return this.e > this.d.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is negative, otherwise return false.\r\n   *\r\n   */\r\n  P.isNegative = P.isneg = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is positive, otherwise return false.\r\n   *\r\n   */\r\n  P.isPositive = P.ispos = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is 0, otherwise return false.\r\n   *\r\n   */\r\n  P.isZero = function () {\r\n    return this.s === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThan = P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThanOrEqualTo = P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the logarithm of the value of this Decimal to the specified base, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   * If no base is specified, return log[10](x).\r\n   *\r\n   * log[base](x) = ln(x) / ln(base)\r\n   *\r\n   * The maximum error of the result is 1 ulp (unit in the last place).\r\n   *\r\n   * [base] {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  P.logarithm = P.log = function (base) {\r\n    var r,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision,\r\n      wpr = pr + 5;\r\n\r\n    // Default base is 10.\r\n    if (base === void 0) {\r\n      base = new Ctor(10);\r\n    } else {\r\n      base = new Ctor(base);\r\n\r\n      // log[-b](x) = NaN\r\n      // log[0](x)  = NaN\r\n      // log[1](x)  = NaN\r\n      if (base.s < 1 || base.eq(ONE)) throw Error(decimalError + 'NaN');\r\n    }\r\n\r\n    // log[b](-x) = NaN\r\n    // log[b](0) = -Infinity\r\n    if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));\r\n\r\n    // log[b](1) = 0\r\n    if (x.eq(ONE)) return new Ctor(0);\r\n\r\n    external = false;\r\n    r = divide(ln(x, wpr), ln(base, wpr), wpr);\r\n    external = true;\r\n\r\n    return round(r, pr);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var x = this;\r\n    y = new x.constructor(y);\r\n    return x.s == y.s ? subtract(x, y) : add(x, (y.s = -y.s, y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\r\n  P.modulo = P.mod = function (y) {\r\n    var q,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // x % 0 = NaN\r\n    if (!y.s) throw Error(decimalError + 'NaN');\r\n\r\n    // Return x if x is 0.\r\n    if (!x.s) return round(new Ctor(x), pr);\r\n\r\n    // Prevent rounding of intermediate calculations.\r\n    external = false;\r\n    q = divide(x, y, 0, 1).times(y);\r\n    external = true;\r\n\r\n    return x.minus(q);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n   * i.e. the base e raised to the power the value of this Decimal, truncated to `precision`\r\n   * significant digits.\r\n   *\r\n   */\r\n  P.naturalExponential = P.exp = function () {\r\n    return exp(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n   * truncated to `precision` significant digits.\r\n   *\r\n   */\r\n  P.naturalLogarithm = P.ln = function () {\r\n    return ln(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n   * -1.\r\n   *\r\n   */\r\n  P.negated = P.neg = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = -x.s || 0;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var x = this;\r\n    y = new x.constructor(y);\r\n    return x.s == y.s ? add(x, y) : subtract(x, (y.s = -y.s, y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of significant digits of the value of this Decimal.\r\n   *\r\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n   *\r\n   */\r\n  P.precision = P.sd = function (z) {\r\n    var e, sd, w,\r\n      x = this;\r\n\r\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n    e = getBase10Exponent(x) + 1;\r\n    w = x.d.length - 1;\r\n    sd = w * LOG_BASE + 1;\r\n    w = x.d[w];\r\n\r\n    // If non-zero...\r\n    if (w) {\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      for (; w % 10 == 0; w /= 10) sd--;\r\n\r\n      // Add the number of digits of the first word.\r\n      for (w = x.d[0]; w >= 10; w /= 10) sd++;\r\n    }\r\n\r\n    return z && e > sd ? e : sd;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of this Decimal, truncated to `precision`\r\n   * significant digits.\r\n   *\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var e, n, pr, r, s, t, wpr,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    // Negative or zero?\r\n    if (x.s < 1) {\r\n      if (!x.s) return new Ctor(0);\r\n\r\n      // sqrt(-x) = NaN\r\n      throw Error(decimalError + 'NaN');\r\n    }\r\n\r\n    e = getBase10Exponent(x);\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+x);\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = digitsToString(x.d);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(n);\r\n      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '1e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    pr = Ctor.precision;\r\n    s = wpr = pr + 3;\r\n\r\n    // Newton-Raphson iteration.\r\n    for (;;) {\r\n      t = r;\r\n      r = t.plus(divide(x, t, wpr + 2)).times(0.5);\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === (n = digitsToString(r.d)).slice(0, wpr)) {\r\n        n = n.slice(wpr - 3, wpr + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n        // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n        if (s == wpr && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          round(t, pr + 1, 0);\r\n\r\n          if (t.times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        } else if (n != '9999') {\r\n          break;\r\n        }\r\n\r\n        wpr += 4;\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return round(r, pr);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal times `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var carry, e, i, k, r, rL, t, xdL, ydL,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      xd = x.d,\r\n      yd = (y = new Ctor(y)).d;\r\n\r\n    // Return 0 if either is 0.\r\n    if (!x.s || !y.s) return new Ctor(0);\r\n\r\n    y.s *= x.s;\r\n    e = x.e + y.e;\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Ensure xd points to the longer array.\r\n    if (xdL < ydL) {\r\n      r = xd;\r\n      xd = yd;\r\n      yd = r;\r\n      rL = xdL;\r\n      xdL = ydL;\r\n      ydL = rL;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    r = [];\r\n    rL = xdL + ydL;\r\n    for (i = rL; i--;) r.push(0);\r\n\r\n    // Multiply!\r\n    for (i = ydL; --i >= 0;) {\r\n      carry = 0;\r\n      for (k = xdL + i; k > i;) {\r\n        t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n        r[k--] = t % BASE | 0;\r\n        carry = t / BASE | 0;\r\n      }\r\n\r\n      r[k] = (r[k] + carry) % BASE | 0;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; !r[--rL];) r.pop();\r\n\r\n    if (carry) ++e;\r\n    else r.shift();\r\n\r\n    y.d = r;\r\n    y.e = e;\r\n\r\n    return external ? round(y, Ctor.precision) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n   *\r\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toDecimalPlaces = P.todp = function (dp, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n    if (dp === void 0) return x;\r\n\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    return round(x, dp + getBase10Exponent(x) + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in exponential notation rounded to\r\n   * `dp` fixed decimal places using rounding mode `rounding`.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = toString(x, true);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = round(new Ctor(x), dp + 1, rm);\r\n      str = toString(x, true, dp + 1);\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n   * omitted.\r\n   *\r\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   * (-0).toFixed(3) is '0.000'.\r\n   * (-0.5).toFixed(0) is '-0'.\r\n   *\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    var str, y,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) return toString(x);\r\n\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    y = round(new Ctor(x), dp + getBase10Exponent(x) + 1, rm);\r\n    str = toString(y.abs(), false, dp + getBase10Exponent(y) + 1);\r\n\r\n    // To determine whether to add the minus sign look at the value before it was rounded,\r\n    // i.e. look at `x` rather than `y`.\r\n    return x.isneg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n   * rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.toInteger = P.toint = function () {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n    return round(new Ctor(x), getBase10Exponent(x) + 1, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this Decimal converted to a number primitive.\r\n   *\r\n   */\r\n  P.toNumber = function () {\r\n    return +this;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`,\r\n   * truncated to `precision` significant digits.\r\n   *\r\n   * For non-integer or very large exponents pow(x, y) is calculated using\r\n   *\r\n   *   x^y = exp(y*ln(x))\r\n   *\r\n   * The maximum error is 1 ulp (unit in last place).\r\n   *\r\n   * y {number|string|Decimal} The power to which to raise this Decimal.\r\n   *\r\n   */\r\n  P.toPower = P.pow = function (y) {\r\n    var e, k, pr, r, sign, yIsInt,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      guard = 12,\r\n      yn = +(y = new Ctor(y));\r\n\r\n    // pow(x, 0) = 1\r\n    if (!y.s) return new Ctor(ONE);\r\n\r\n    x = new Ctor(x);\r\n\r\n    // pow(0, y > 0) = 0\r\n    // pow(0, y < 0) = Infinity\r\n    if (!x.s) {\r\n      if (y.s < 1) throw Error(decimalError + 'Infinity');\r\n      return x;\r\n    }\r\n\r\n    // pow(1, y) = 1\r\n    if (x.eq(ONE)) return x;\r\n\r\n    pr = Ctor.precision;\r\n\r\n    // pow(x, 1) = x\r\n    if (y.eq(ONE)) return round(x, pr);\r\n\r\n    e = y.e;\r\n    k = y.d.length - 1;\r\n    yIsInt = e >= k;\r\n    sign = x.s;\r\n\r\n    if (!yIsInt) {\r\n\r\n      // pow(x < 0, y non-integer) = NaN\r\n      if (sign < 0) throw Error(decimalError + 'NaN');\r\n\r\n    // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n    } else if ((k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n      r = new Ctor(ONE);\r\n\r\n      // Max k of 9007199254740991 takes 53 loop iterations.\r\n      // Maximum digits array length; leaves [28, 34] guard digits.\r\n      e = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n      external = false;\r\n\r\n      for (;;) {\r\n        if (k % 2) {\r\n          r = r.times(x);\r\n          truncate(r.d, e);\r\n        }\r\n\r\n        k = mathfloor(k / 2);\r\n        if (k === 0) break;\r\n\r\n        x = x.times(x);\r\n        truncate(x.d, e);\r\n      }\r\n\r\n      external = true;\r\n\r\n      return y.s < 0 ? new Ctor(ONE).div(r) : round(r, pr);\r\n    }\r\n\r\n    // Result is negative if x is negative and the last digit of integer y is odd.\r\n    sign = sign < 0 && y.d[Math.max(e, k)] & 1 ? -1 : 1;\r\n\r\n    x.s = 1;\r\n    external = false;\r\n    r = y.times(ln(x, pr + guard));\r\n    external = true;\r\n    r = exp(r);\r\n    r.s = sign;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    var e, str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      e = getBase10Exponent(x);\r\n      str = toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = round(new Ctor(x), sd, rm);\r\n      e = getBase10Exponent(x);\r\n      str = toString(x, sd <= e || e <= Ctor.toExpNeg, sd);\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n   * omitted.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toSignificantDigits = P.tosd = function (sd, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    return round(new Ctor(x), sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   *\r\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n   *\r\n   */\r\n  P.toString = P.valueOf = P.val = P.toJSON = function () {\r\n    var x = this,\r\n      e = getBase10Exponent(x),\r\n      Ctor = x.constructor;\r\n\r\n    return toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);\r\n  };\r\n\r\n\r\n  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n  /*\r\n   *  add                 P.minus, P.plus\r\n   *  checkInt32          P.todp, P.toExponential, P.toFixed, P.toPrecision, P.tosd\r\n   *  digitsToString      P.log, P.sqrt, P.pow, toString, exp, ln\r\n   *  divide              P.div, P.idiv, P.log, P.mod, P.sqrt, exp, ln\r\n   *  exp                 P.exp, P.pow\r\n   *  getBase10Exponent   P.exponent, P.sd, P.toint, P.sqrt, P.todp, P.toFixed, P.toPrecision,\r\n   *                      P.toString, divide, round, toString, exp, ln\r\n   *  getLn10             P.log, ln\r\n   *  getZeroString       digitsToString, toString\r\n   *  ln                  P.log, P.ln, P.pow, exp\r\n   *  parseDecimal        Decimal\r\n   *  round               P.abs, P.idiv, P.log, P.minus, P.mod, P.neg, P.plus, P.toint, P.sqrt,\r\n   *                      P.times, P.todp, P.toExponential, P.toFixed, P.pow, P.toPrecision, P.tosd,\r\n   *                      divide, getLn10, exp, ln\r\n   *  subtract            P.minus, P.plus\r\n   *  toString            P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf\r\n   *  truncate            P.pow\r\n   *\r\n   *  Throws:             P.log, P.mod, P.sd, P.sqrt, P.pow,  checkInt32, divide, round,\r\n   *                      getLn10, exp, ln, parseDecimal, Decimal, config\r\n   */\r\n\r\n\r\n  function add(x, y) {\r\n    var carry, d, e, i, k, len, xd, yd,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision;\r\n\r\n    // If either is zero...\r\n    if (!x.s || !y.s) {\r\n\r\n      // Return x if y is zero.\r\n      // Return y if y is non-zero.\r\n      if (!y.s) y = new Ctor(x);\r\n      return external ? round(y, pr) : y;\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    k = x.e;\r\n    e = y.e;\r\n    xd = xd.slice();\r\n    i = k - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (i) {\r\n      if (i < 0) {\r\n        d = xd;\r\n        i = -i;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = k;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n      k = Math.ceil(pr / LOG_BASE);\r\n      len = k > len ? k + 1 : len + 1;\r\n\r\n      if (i > len) {\r\n        i = len;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n      d.reverse();\r\n      for (; i--;) d.push(0);\r\n      d.reverse();\r\n    }\r\n\r\n    len = xd.length;\r\n    i = yd.length;\r\n\r\n    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n    if (len - i < 0) {\r\n      i = len;\r\n      d = yd;\r\n      yd = xd;\r\n      xd = d;\r\n    }\r\n\r\n    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n    for (carry = 0; i;) {\r\n      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n      xd[i] %= BASE;\r\n    }\r\n\r\n    if (carry) {\r\n      xd.unshift(carry);\r\n      ++e;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n    y.d = xd;\r\n    y.e = e;\r\n\r\n    return external ? round(y, pr) : y;\r\n  }\r\n\r\n\r\n  function checkInt32(i, min, max) {\r\n    if (i !== ~~i || i < min || i > max) {\r\n      throw Error(invalidArgument + i);\r\n    }\r\n  }\r\n\r\n\r\n  function digitsToString(d) {\r\n    var i, k, ws,\r\n      indexOfLastWord = d.length - 1,\r\n      str = '',\r\n      w = d[0];\r\n\r\n    if (indexOfLastWord > 0) {\r\n      str += w;\r\n      for (i = 1; i < indexOfLastWord; i++) {\r\n        ws = d[i] + '';\r\n        k = LOG_BASE - ws.length;\r\n        if (k) str += getZeroString(k);\r\n        str += ws;\r\n      }\r\n\r\n      w = d[i];\r\n      ws = w + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n    } else if (w === 0) {\r\n      return '0';\r\n    }\r\n\r\n    // Remove trailing zeros of last w.\r\n    for (; w % 10 === 0;) w /= 10;\r\n\r\n    return str + w;\r\n  }\r\n\r\n\r\n  var divide = (function () {\r\n\r\n    // Assumes non-zero x and k, and hence non-zero result.\r\n    function multiplyInteger(x, k) {\r\n      var temp,\r\n        carry = 0,\r\n        i = x.length;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        temp = x[i] * k + carry;\r\n        x[i] = temp % BASE | 0;\r\n        carry = temp / BASE | 0;\r\n      }\r\n\r\n      if (carry) x.unshift(carry);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, r;\r\n\r\n      if (aL != bL) {\r\n        r = aL > bL ? 1 : -1;\r\n      } else {\r\n        for (i = r = 0; i < aL; i++) {\r\n          if (a[i] != b[i]) {\r\n            r = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return r;\r\n    }\r\n\r\n    function subtract(a, b, aL) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * BASE + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1;) a.shift();\r\n    }\r\n\r\n    return function (x, y, pr, dp) {\r\n      var cmp, e, i, k, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0, yL, yz,\r\n        Ctor = x.constructor,\r\n        sign = x.s == y.s ? 1 : -1,\r\n        xd = x.d,\r\n        yd = y.d;\r\n\r\n      // Either 0?\r\n      if (!x.s) return new Ctor(x);\r\n      if (!y.s) throw Error(decimalError + 'Division by zero');\r\n\r\n      e = x.e - y.e;\r\n      yL = yd.length;\r\n      xL = xd.length;\r\n      q = new Ctor(sign);\r\n      qd = q.d = [];\r\n\r\n      // Result exponent may be one less than e.\r\n      for (i = 0; yd[i] == (xd[i] || 0); ) ++i;\r\n      if (yd[i] > (xd[i] || 0)) --e;\r\n\r\n      if (pr == null) {\r\n        sd = pr = Ctor.precision;\r\n      } else if (dp) {\r\n        sd = pr + (getBase10Exponent(x) - getBase10Exponent(y)) + 1;\r\n      } else {\r\n        sd = pr;\r\n      }\r\n\r\n      if (sd < 0) return new Ctor(0);\r\n\r\n      // Convert precision in number of base 10 digits to base 1e7 digits.\r\n      sd = sd / LOG_BASE + 2 | 0;\r\n      i = 0;\r\n\r\n      // divisor < 1e7\r\n      if (yL == 1) {\r\n        k = 0;\r\n        yd = yd[0];\r\n        sd++;\r\n\r\n        // k is the carry.\r\n        for (; (i < xL || k) && sd--; i++) {\r\n          t = k * BASE + (xd[i] || 0);\r\n          qd[i] = t / yd | 0;\r\n          k = t % yd | 0;\r\n        }\r\n\r\n      // divisor >= 1e7\r\n      } else {\r\n\r\n        // Normalise xd and yd so highest order digit of yd is >= BASE/2\r\n        k = BASE / (yd[0] + 1) | 0;\r\n\r\n        if (k > 1) {\r\n          yd = multiplyInteger(yd, k);\r\n          xd = multiplyInteger(xd, k);\r\n          yL = yd.length;\r\n          xL = xd.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xd.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL;) rem[remL++] = 0;\r\n\r\n        yz = yd.slice();\r\n        yz.unshift(0);\r\n        yd0 = yd[0];\r\n\r\n        if (yd[1] >= BASE / 2) ++yd0;\r\n\r\n        do {\r\n          k = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yd, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, k.\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * BASE + (rem[1] || 0);\r\n\r\n            // k will be how many times the divisor goes into the current remainder.\r\n            k = rem0 / yd0 | 0;\r\n\r\n            //  Algorithm:\r\n            //  1. product = divisor * trial digit (k)\r\n            //  2. if product > remainder: product -= divisor, k--\r\n            //  3. remainder -= product\r\n            //  4. if product was < remainder at 2:\r\n            //    5. compare new remainder and divisor\r\n            //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n            if (k > 1) {\r\n              if (k >= BASE) k = BASE - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiplyInteger(yd, k);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              cmp = compare(prod, rem, prodL, remL);\r\n\r\n              // product > remainder.\r\n              if (cmp == 1) {\r\n                k--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yd, prodL);\r\n              }\r\n            } else {\r\n\r\n              // cmp is -1.\r\n              // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n              // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n              if (k == 0) cmp = k = 1;\r\n              prod = yd.slice();\r\n            }\r\n\r\n            prodL = prod.length;\r\n            if (prodL < remL) prod.unshift(0);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL);\r\n\r\n            // If product was < previous remainder.\r\n            if (cmp == -1) {\r\n              remL = rem.length;\r\n\r\n              // Compare divisor and new remainder.\r\n              cmp = compare(yd, rem, yL, remL);\r\n\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              if (cmp < 1) {\r\n                k++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yd, remL);\r\n              }\r\n            }\r\n\r\n            remL = rem.length;\r\n          } else if (cmp === 0) {\r\n            k++;\r\n            rem = [0];\r\n          }    // if cmp === 1, k will be 0\r\n\r\n          // Add the next digit, k, to the result array.\r\n          qd[i++] = k;\r\n\r\n          // Update the remainder.\r\n          if (cmp && rem[0]) {\r\n            rem[remL++] = xd[xi] || 0;\r\n          } else {\r\n            rem = [xd[xi]];\r\n            remL = 1;\r\n          }\r\n\r\n        } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n      }\r\n\r\n      // Leading zero?\r\n      if (!qd[0]) qd.shift();\r\n\r\n      q.e = e;\r\n\r\n      return round(q, dp ? pr + getBase10Exponent(q) + 1 : pr);\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x` truncated to `sd`\r\n   * significant digits.\r\n   *\r\n   * Taylor/Maclaurin series.\r\n   *\r\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n   *\r\n   * Argument reduction:\r\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n   *   exp(x) = exp(x / 2^k)^(2^k)\r\n   *\r\n   * Previously, the argument was initially reduced by\r\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n   * found to be slower than just dividing repeatedly by 32 as above.\r\n   *\r\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n   *\r\n   *  exp(x) is non-terminating for any finite, non-zero x.\r\n   *\r\n   */\r\n  function exp(x, sd) {\r\n    var denominator, guard, pow, sum, t, wpr,\r\n      i = 0,\r\n      k = 0,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision;\r\n\r\n    if (getBase10Exponent(x) > 16) throw Error(exponentOutOfRange + getBase10Exponent(x));\r\n\r\n    // exp(0) = 1\r\n    if (!x.s) return new Ctor(ONE);\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    t = new Ctor(0.03125);\r\n\r\n    while (x.abs().gte(0.1)) {\r\n      x = x.times(t);    // x = x / 2^5\r\n      k += 5;\r\n    }\r\n\r\n    // Estimate the precision increase necessary to ensure the first 4 rounding digits are correct.\r\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n    wpr += guard;\r\n    denominator = pow = sum = new Ctor(ONE);\r\n    Ctor.precision = wpr;\r\n\r\n    for (;;) {\r\n      pow = round(pow.times(x), wpr);\r\n      denominator = denominator.times(++i);\r\n      t = sum.plus(divide(pow, denominator, wpr));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        while (k--) sum = round(sum.times(sum), wpr);\r\n        Ctor.precision = pr;\r\n        return sd == null ? (external = true, round(sum, pr)) : sum;\r\n      }\r\n\r\n      sum = t;\r\n    }\r\n  }\r\n\r\n\r\n  // Calculate the base 10 exponent from the base 1e7 exponent.\r\n  function getBase10Exponent(x) {\r\n    var e = x.e * LOG_BASE,\r\n      w = x.d[0];\r\n\r\n    // Add the number of digits of the first word of the digits array.\r\n    for (; w >= 10; w /= 10) e++;\r\n    return e;\r\n  }\r\n\r\n\r\n  function getLn10(Ctor, sd, pr) {\r\n\r\n    if (sd > Ctor.LN10.sd()) {\r\n\r\n\r\n      // Reset global state in case the exception is caught.\r\n      external = true;\r\n      if (pr) Ctor.precision = pr;\r\n      throw Error(decimalError + 'LN10 precision limit exceeded');\r\n    }\r\n\r\n    return round(new Ctor(Ctor.LN10), sd);\r\n  }\r\n\r\n\r\n  function getZeroString(k) {\r\n    var zs = '';\r\n    for (; k--;) zs += '0';\r\n    return zs;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x` truncated to `sd` significant\r\n   * digits.\r\n   *\r\n   *  ln(n) is non-terminating (n != 1)\r\n   *\r\n   */\r\n  function ln(y, sd) {\r\n    var c, c0, denominator, e, numerator, sum, t, wpr, x2,\r\n      n = 1,\r\n      guard = 10,\r\n      x = y,\r\n      xd = x.d,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision;\r\n\r\n    // ln(-x) = NaN\r\n    // ln(0) = -Infinity\r\n    if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));\r\n\r\n    // ln(1) = 0\r\n    if (x.eq(ONE)) return new Ctor(0);\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    if (x.eq(10)) {\r\n      if (sd == null) external = true;\r\n      return getLn10(Ctor, wpr);\r\n    }\r\n\r\n    wpr += guard;\r\n    Ctor.precision = wpr;\r\n    c = digitsToString(xd);\r\n    c0 = c.charAt(0);\r\n    e = getBase10Exponent(x);\r\n\r\n    if (Math.abs(e) < 1.5e15) {\r\n\r\n      // Argument reduction.\r\n      // The series converges faster the closer the argument is to 1, so using\r\n      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n      // later be divided by this number, then separate out the power of 10 using\r\n      // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n      // max n is 6 (gives 0.7 - 1.3)\r\n      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n        x = x.times(y);\r\n        c = digitsToString(x.d);\r\n        c0 = c.charAt(0);\r\n        n++;\r\n      }\r\n\r\n      e = getBase10Exponent(x);\r\n\r\n      if (c0 > 1) {\r\n        x = new Ctor('0.' + c);\r\n        e++;\r\n      } else {\r\n        x = new Ctor(c0 + '.' + c.slice(1));\r\n      }\r\n    } else {\r\n\r\n      // The argument reduction method above may result in overflow if the argument y is a massive\r\n      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n      // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n      x = ln(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n\r\n      Ctor.precision = pr;\r\n      return sd == null ? (external = true, round(x, pr)) : x;\r\n    }\r\n\r\n    // x is reduced to a value near 1.\r\n\r\n    // Taylor series.\r\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n    sum = numerator = x = divide(x.minus(ONE), x.plus(ONE), wpr);\r\n    x2 = round(x.times(x), wpr);\r\n    denominator = 3;\r\n\r\n    for (;;) {\r\n      numerator = round(numerator.times(x2), wpr);\r\n      t = sum.plus(divide(numerator, new Ctor(denominator), wpr));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        sum = sum.times(2);\r\n\r\n        // Reverse the argument reduction.\r\n        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n        sum = divide(sum, new Ctor(n), wpr);\r\n\r\n        Ctor.precision = pr;\r\n        return sd == null ? (external = true, round(sum, pr)) : sum;\r\n      }\r\n\r\n      sum = t;\r\n      denominator += 2;\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from string `str`.\r\n   */\r\n  function parseDecimal(x, str) {\r\n    var e, i, len;\r\n\r\n    // Decimal point?\r\n    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = str.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +str.slice(i + 1);\r\n      str = str.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48;) ++i;\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(len - 1) === 48;) --len;\r\n    str = str.slice(i, len);\r\n\r\n    if (str) {\r\n      len -= i;\r\n      e = e - i - 1;\r\n      x.e = mathfloor(e / LOG_BASE);\r\n      x.d = [];\r\n\r\n      // Transform base\r\n\r\n      // e is the base 10 exponent.\r\n      // i is where to slice str to get the first word of the digits array.\r\n      i = (e + 1) % LOG_BASE;\r\n      if (e < 0) i += LOG_BASE;\r\n\r\n      if (i < len) {\r\n        if (i) x.d.push(+str.slice(0, i));\r\n        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n        str = str.slice(i);\r\n        i = LOG_BASE - str.length;\r\n      } else {\r\n        i -= len;\r\n      }\r\n\r\n      for (; i--;) str += '0';\r\n      x.d.push(+str);\r\n\r\n      if (external && (x.e > MAX_E || x.e < -MAX_E)) throw Error(exponentOutOfRange + e);\r\n    } else {\r\n\r\n      // Zero.\r\n      x.s = 0;\r\n      x.e = 0;\r\n      x.d = [0];\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Round `x` to `sd` significant digits, using rounding mode `rm` if present (truncate otherwise).\r\n   */\r\n   function round(x, sd, rm) {\r\n    var i, j, k, n, rd, doRound, w, xdi,\r\n      xd = x.d;\r\n\r\n    // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n    // w: the word of xd which contains the rounding digit, a base 1e7 number.\r\n    // xdi: the index of w within xd.\r\n    // n: the number of digits of w.\r\n    // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n    // they had leading zeros)\r\n    // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n    // Get the length of the first word of the digits array xd.\r\n    for (n = 1, k = xd[0]; k >= 10; k /= 10) n++;\r\n    i = sd - n;\r\n\r\n    // Is the rounding digit in the first word of xd?\r\n    if (i < 0) {\r\n      i += LOG_BASE;\r\n      j = sd;\r\n      w = xd[xdi = 0];\r\n    } else {\r\n      xdi = Math.ceil((i + 1) / LOG_BASE);\r\n      k = xd.length;\r\n      if (xdi >= k) return x;\r\n      w = k = xd[xdi];\r\n\r\n      // Get the number of digits of w.\r\n      for (n = 1; k >= 10; k /= 10) n++;\r\n\r\n      // Get the index of rd within w.\r\n      i %= LOG_BASE;\r\n\r\n      // Get the index of rd within w, adjusted for leading zeros.\r\n      // The number of leading zeros of w is given by LOG_BASE - n.\r\n      j = i - LOG_BASE + n;\r\n    }\r\n\r\n    if (rm !== void 0) {\r\n      k = mathpow(10, n - j - 1);\r\n\r\n      // Get the rounding digit at index j of w.\r\n      rd = w / k % 10 | 0;\r\n\r\n      // Are there any non-zero digits after the rounding digit?\r\n      doRound = sd < 0 || xd[xdi + 1] !== void 0 || w % k;\r\n\r\n      // The expression `w % mathpow(10, n - j - 1)` returns all the digits of w to the right of the\r\n      // digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression will give\r\n      // 714.\r\n\r\n      doRound = rm < 4\r\n        ? (rd || doRound) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n        : rd > 5 || rd == 5 && (rm == 4 || doRound || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? w / mathpow(10, n - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n            rm == (x.s < 0 ? 8 : 7));\r\n    }\r\n\r\n    if (sd < 1 || !xd[0]) {\r\n      if (doRound) {\r\n        k = getBase10Exponent(x);\r\n        xd.length = 1;\r\n\r\n        // Convert sd to decimal places.\r\n        sd = sd - k - 1;\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n        x.e = mathfloor(-sd / LOG_BASE) || 0;\r\n      } else {\r\n        xd.length = 1;\r\n\r\n        // Zero.\r\n        xd[0] = x.e = x.s = 0;\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n    // Remove excess digits.\r\n    if (i == 0) {\r\n      xd.length = xdi;\r\n      k = 1;\r\n      xdi--;\r\n    } else {\r\n      xd.length = xdi + 1;\r\n      k = mathpow(10, LOG_BASE - i);\r\n\r\n      // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n      // j > 0 means i > number of leading zeros of w.\r\n      xd[xdi] = j > 0 ? (w / mathpow(10, n - j) % mathpow(10, j) | 0) * k : 0;\r\n    }\r\n\r\n    if (doRound) {\r\n      for (;;) {\r\n\r\n        // Is the digit to be rounded up in the first word of xd?\r\n        if (xdi == 0) {\r\n          if ((xd[0] += k) == BASE) {\r\n            xd[0] = 1;\r\n            ++x.e;\r\n          }\r\n\r\n          break;\r\n        } else {\r\n          xd[xdi] += k;\r\n          if (xd[xdi] != BASE) break;\r\n          xd[xdi--] = 0;\r\n          k = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n\r\n    if (external && (x.e > MAX_E || x.e < -MAX_E)) {\r\n      throw Error(exponentOutOfRange + getBase10Exponent(x));\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function subtract(x, y) {\r\n    var d, e, i, j, k, len, xd, xe, xLTy, yd,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision;\r\n\r\n    // Return y negated if x is zero.\r\n    // Return x if y is zero and x is non-zero.\r\n    if (!x.s || !y.s) {\r\n      if (y.s) y.s = -y.s;\r\n      else y = new Ctor(x);\r\n      return external ? round(y, pr) : y;\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n\r\n    // x and y are non-zero numbers with the same sign.\r\n\r\n    e = y.e;\r\n    xe = x.e;\r\n    xd = xd.slice();\r\n    k = xe - e;\r\n\r\n    // If exponents differ...\r\n    if (k) {\r\n      xLTy = k < 0;\r\n\r\n      if (xLTy) {\r\n        d = xd;\r\n        k = -k;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = xe;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Numbers with massively different exponents would result in a very high number of zeros\r\n      // needing to be prepended, but this can be avoided while still ensuring correct rounding by\r\n      // limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n      if (k > i) {\r\n        k = i;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      d.reverse();\r\n      for (i = k; i--;) d.push(0);\r\n      d.reverse();\r\n\r\n    // Base 1e7 exponents equal.\r\n    } else {\r\n\r\n      // Check digits to determine which is the bigger number.\r\n\r\n      i = xd.length;\r\n      len = yd.length;\r\n      xLTy = i < len;\r\n      if (xLTy) len = i;\r\n\r\n      for (i = 0; i < len; i++) {\r\n        if (xd[i] != yd[i]) {\r\n          xLTy = xd[i] < yd[i];\r\n          break;\r\n        }\r\n      }\r\n\r\n      k = 0;\r\n    }\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      xd = yd;\r\n      yd = d;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    len = xd.length;\r\n\r\n    // Append zeros to xd if shorter.\r\n    // Don't add zeros to yd if shorter as subtraction only needs to start at yd length.\r\n    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n    // Subtract yd from xd.\r\n    for (i = yd.length; i > k;) {\r\n      if (xd[--i] < yd[i]) {\r\n        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n        --xd[j];\r\n        xd[i] += BASE;\r\n      }\r\n\r\n      xd[i] -= yd[i];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] === 0;) xd.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n    // Zero?\r\n    if (!xd[0]) return new Ctor(0);\r\n\r\n    y.d = xd;\r\n    y.e = e;\r\n\r\n    //return external && xd.length >= pr / LOG_BASE ? round(y, pr) : y;\r\n    return external ? round(y, pr) : y;\r\n  }\r\n\r\n\r\n  function toString(x, isExp, sd) {\r\n    var k,\r\n      e = getBase10Exponent(x),\r\n      str = digitsToString(x.d),\r\n      len = str.length;\r\n\r\n    if (isExp) {\r\n      if (sd && (k = sd - len) > 0) {\r\n        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n      } else if (len > 1) {\r\n        str = str.charAt(0) + '.' + str.slice(1);\r\n      }\r\n\r\n      str = str + (e < 0 ? 'e' : 'e+') + e;\r\n    } else if (e < 0) {\r\n      str = '0.' + getZeroString(-e - 1) + str;\r\n      if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n    } else if (e >= len) {\r\n      str += getZeroString(e + 1 - len);\r\n      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n    } else {\r\n      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n      if (sd && (k = sd - len) > 0) {\r\n        if (e + 1 === len) str += '.';\r\n        str += getZeroString(k);\r\n      }\r\n    }\r\n\r\n    return x.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Does not strip trailing zeros.\r\n  function truncate(arr, len) {\r\n    if (arr.length > len) {\r\n      arr.length = len;\r\n      return true;\r\n    }\r\n  }\r\n\r\n\r\n  // Decimal methods\r\n\r\n\r\n  /*\r\n   *  clone\r\n   *  config/set\r\n   */\r\n\r\n\r\n  /*\r\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n   * constructor.\r\n   *\r\n   */\r\n  function clone(obj) {\r\n    var i, p, ps;\r\n\r\n    /*\r\n     * The Decimal constructor and exported function.\r\n     * Return a new Decimal instance.\r\n     *\r\n     * value {number|string|Decimal} A numeric value.\r\n     *\r\n     */\r\n    function Decimal(value) {\r\n      var x = this;\r\n\r\n      // Decimal called without new.\r\n      if (!(x instanceof Decimal)) return new Decimal(value);\r\n\r\n      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n      // which points to Object.\r\n      x.constructor = Decimal;\r\n\r\n      // Duplicate.\r\n      if (value instanceof Decimal) {\r\n        x.s = value.s;\r\n        x.e = value.e;\r\n        x.d = (value = value.d) ? value.slice() : value;\r\n        return;\r\n      }\r\n\r\n      if (typeof value === 'number') {\r\n\r\n        // Reject Infinity/NaN.\r\n        if (value * 0 !== 0) {\r\n          throw Error(invalidArgument + value);\r\n        }\r\n\r\n        if (value > 0) {\r\n          x.s = 1;\r\n        } else if (value < 0) {\r\n          value = -value;\r\n          x.s = -1;\r\n        } else {\r\n          x.s = 0;\r\n          x.e = 0;\r\n          x.d = [0];\r\n          return;\r\n        }\r\n\r\n        // Fast path for small integers.\r\n        if (value === ~~value && value < 1e7) {\r\n          x.e = 0;\r\n          x.d = [value];\r\n          return;\r\n        }\r\n\r\n        return parseDecimal(x, value.toString());\r\n      } else if (typeof value !== 'string') {\r\n        throw Error(invalidArgument + value);\r\n      }\r\n\r\n      // Minus sign?\r\n      if (value.charCodeAt(0) === 45) {\r\n        value = value.slice(1);\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 1;\r\n      }\r\n\r\n      if (isDecimal.test(value)) parseDecimal(x, value);\r\n      else throw Error(invalidArgument + value);\r\n    }\r\n\r\n    Decimal.prototype = P;\r\n\r\n    Decimal.ROUND_UP = 0;\r\n    Decimal.ROUND_DOWN = 1;\r\n    Decimal.ROUND_CEIL = 2;\r\n    Decimal.ROUND_FLOOR = 3;\r\n    Decimal.ROUND_HALF_UP = 4;\r\n    Decimal.ROUND_HALF_DOWN = 5;\r\n    Decimal.ROUND_HALF_EVEN = 6;\r\n    Decimal.ROUND_HALF_CEIL = 7;\r\n    Decimal.ROUND_HALF_FLOOR = 8;\r\n\r\n    Decimal.clone = clone;\r\n    Decimal.config = Decimal.set = config;\r\n\r\n    if (obj === void 0) obj = {};\r\n    if (obj) {\r\n      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'LN10'];\r\n      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n    }\r\n\r\n    Decimal.config(obj);\r\n\r\n    return Decimal;\r\n  }\r\n\r\n\r\n  /*\r\n   * Configure global settings for a Decimal constructor.\r\n   *\r\n   * `obj` is an object with one or more of the following properties,\r\n   *\r\n   *   precision  {number}\r\n   *   rounding   {number}\r\n   *   toExpNeg   {number}\r\n   *   toExpPos   {number}\r\n   *\r\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n   *\r\n   */\r\n  function config(obj) {\r\n    if (!obj || typeof obj !== 'object') {\r\n      throw Error(decimalError + 'Object expected');\r\n    }\r\n    var i, p, v,\r\n      ps = [\r\n        'precision', 1, MAX_DIGITS,\r\n        'rounding', 0, 8,\r\n        'toExpNeg', -1 / 0, 0,\r\n        'toExpPos', 0, 1 / 0\r\n      ];\r\n\r\n    for (i = 0; i < ps.length; i += 3) {\r\n      if ((v = obj[p = ps[i]]) !== void 0) {\r\n        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n        else throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    if ((v = obj[p = 'LN10']) !== void 0) {\r\n        if (v == Math.LN10) this[p] = new this(v);\r\n        else throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n\r\n  // Create and configure initial Decimal constructor.\r\n  Decimal = clone(Decimal);\r\n\r\n  Decimal['default'] = Decimal.Decimal = Decimal;\r\n\r\n  // Internal constant.\r\n  ONE = new Decimal(1);\r\n\r\n\r\n  // Export.\r\n\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () {\r\n      return Decimal;\r\n    });\r\n\r\n  // Node and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = Decimal;\r\n\r\n    // Browser.\r\n  } else {\r\n    if (!globalScope) {\r\n      globalScope = typeof self != 'undefined' && self && self.self == self\r\n        ? self : Function('return this')();\r\n    }\r\n\r\n    globalScope.Decimal = Decimal;\r\n  }\r\n})(this);\r\n"],"sourceRoot":""}